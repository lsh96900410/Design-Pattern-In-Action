팩토리 패턴(Factory Pattern)

1. 객체를 사용하는 코드에서 객체 생성 부분을 떼어내 추상화한 패턴
2. 상속 관계에 있는 두 클래스에서 상위 클래스가 중요한 뼈대를 결정하고, 하위 클래스에서 객체 생성에 관한 구체적인 내용을 결정

-> 클래스가 분리되기 때문에 느슨한 결합을 가지며, 상위 클래스에서는 인스턴스 생성 방식을 알 필요가 없기 때문에 더 많은 유연성을 가진다.
-> 객체 생성 로직이 따로 존재하기 때문에 코드 리펙터링 과정에서 유지 보수성이 증가된다.


1. 팩토리 메서드 패턴은 객체 생성을 공장(factory) 클래스로 캡슐화 처리하여 대신 생성하게 하는 디자인 패턴이다.
2. 객체 생성에 관한 로직을 미리 구성해두고, 전/후 처리 작업을 통해 생성 과정을 다양화하여 객체를 유연하게 정할 수 있다는 특징 존재


패턴 사용 시기
1. 클래스 생성과 사용의 처리 로직을 분리하여 결합도를 낮추고자 할 때
2. 코드가 동작해야 하는 객체의 유형과 종속성을 캡슐화를 통해 정보 은닉 처리
3. 라이브러리 및 프레임워크 사용자에게 구성 요소를 확장하는 방법 제공
4. 기존 객체 재구성 대신 기존 객체를 재사용하여 리소스 절약

장점
1. 생성자와 구현 객체의 강한 결합을 피할 수 있다.
2. 객체의 생성 후 공통으로 할 일을 수행하도록 지정 가능
3. 캡슐화, 추상화를 통해 객체의 구체적 타입을 감출 수 있다.
4. 단일 책임 원칙 - 생성 코드를 한 고승로 이동 -> 유지보수 용이
5. 개방 폐쇄 원칙 - 기존 코드 수정 X + 새로운 유형의 제품 인스턴스 도입 가능


단점
1. 구현체마다 팩토리 객체를 모두 구현해주어야 하기 때문에, 서브 클래스 수가 늘어난다.
2. 코드의 복잡성 증가

